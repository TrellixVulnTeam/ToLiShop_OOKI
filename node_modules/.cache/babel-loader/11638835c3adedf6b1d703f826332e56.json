{"ast":null,"code":"var _jsxFileName = \"/Users/linhleba/Desktop/ToLiShop/src/components/controls/Input.jsx\";\nimport React from 'react';\nimport { TextField } from '@material-ui/core';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Input(props) {\n  const NumberFormatCustom = /*#__PURE__*/React.forwardRef(function NumberFormatCustom(props, ref) {\n    const {\n      onChange,\n      ...other\n    } = props;\n    return /*#__PURE__*/_jsxDEV(NumberFormat, { ...other,\n      getInputRef: ref,\n      onValueChange: values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      },\n      thousandSeparator: true,\n      isNumericString: true,\n      prefix: \"\\u0111\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  });\n  NumberFormatCustom.propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n  };\n  const {\n    name,\n    label,\n    value,\n    error = null,\n    onChange,\n    variant = 'outlined',\n    InputProps,\n    type,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    variant: variant,\n    label: label,\n    name: name,\n    value: value,\n    onChange: onChange,\n    InputProps: InputProps,\n    type: type,\n    ...other,\n    ...(error && {\n      error: true,\n      helperText: error\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/linhleba/Desktop/ToLiShop/src/components/controls/Input.jsx"],"names":["React","TextField","NumberFormat","PropTypes","Input","props","NumberFormatCustom","forwardRef","ref","onChange","other","values","target","name","value","propTypes","string","isRequired","func","label","error","variant","InputProps","type","helperText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACnC,QAAMC,kBAAkB,gBAAGN,KAAK,CAACO,UAAN,CAAiB,SAASD,kBAAT,CAC1CD,KAD0C,EAE1CG,GAF0C,EAG1C;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAY,SAAGC;AAAf,QAAyBL,KAA/B;AAEA,wBACE,QAAC,YAAD,OACMK,KADN;AAEE,MAAA,WAAW,EAAEF,GAFf;AAGE,MAAA,aAAa,EAAGG,MAAD,IAAY;AACzBF,QAAAA,QAAQ,CAAC;AACPG,UAAAA,MAAM,EAAE;AACNC,YAAAA,IAAI,EAAER,KAAK,CAACQ,IADN;AAENC,YAAAA,KAAK,EAAEH,MAAM,CAACG;AAFR;AADD,SAAD,CAAR;AAMD,OAVH;AAWE,MAAA,iBAAiB,MAXnB;AAYE,MAAA,eAAe,MAZjB;AAaE,MAAA,MAAM,EAAC;AAbT;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD,GAvB0B,CAA3B;AAyBAR,EAAAA,kBAAkB,CAACS,SAAnB,GAA+B;AAC7BF,IAAAA,IAAI,EAAEV,SAAS,CAACa,MAAV,CAAiBC,UADM;AAE7BR,IAAAA,QAAQ,EAAEN,SAAS,CAACe,IAAV,CAAeD;AAFI,GAA/B;AAIA,QAAM;AACJJ,IAAAA,IADI;AAEJM,IAAAA,KAFI;AAGJL,IAAAA,KAHI;AAIJM,IAAAA,KAAK,GAAG,IAJJ;AAKJX,IAAAA,QALI;AAMJY,IAAAA,OAAO,GAAG,UANN;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,IARI;AASJ,OAAGb;AATC,MAUFL,KAVJ;AAWA,sBACE,QAAC,SAAD;AACE,IAAA,OAAO,EAAEgB,OADX;AAEE,IAAA,KAAK,EAAEF,KAFT;AAGE,IAAA,IAAI,EAAEN,IAHR;AAIE,IAAA,KAAK,EAAEC,KAJT;AAKE,IAAA,QAAQ,EAAEL,QALZ;AAME,IAAA,UAAU,EAAEa,UANd;AAOE,IAAA,IAAI,EAAEC,IAPR;AAAA,OAQMb,KARN;AAAA,QASOU,KAAK,IAAI;AAAEA,MAAAA,KAAK,EAAE,IAAT;AAAeI,MAAAA,UAAU,EAAEJ;AAA3B,KAThB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;KAtDuBhB,K","sourcesContent":["import React from 'react';\nimport { TextField } from '@material-ui/core';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\n\nexport default function Input(props) {\n  const NumberFormatCustom = React.forwardRef(function NumberFormatCustom(\n    props,\n    ref,\n  ) {\n    const { onChange, ...other } = props;\n\n    return (\n      <NumberFormat\n        {...other}\n        getInputRef={ref}\n        onValueChange={(values) => {\n          onChange({\n            target: {\n              name: props.name,\n              value: values.value,\n            },\n          });\n        }}\n        thousandSeparator\n        isNumericString\n        prefix=\"Ä‘\"\n      />\n    );\n  });\n\n  NumberFormatCustom.propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n  const {\n    name,\n    label,\n    value,\n    error = null,\n    onChange,\n    variant = 'outlined',\n    InputProps,\n    type,\n    ...other\n  } = props;\n  return (\n    <TextField\n      variant={variant}\n      label={label}\n      name={name}\n      value={value}\n      onChange={onChange}\n      InputProps={InputProps}\n      type={type}\n      {...other}\n      {...(error && { error: true, helperText: error })}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}