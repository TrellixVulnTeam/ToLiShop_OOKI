{"ast":null,"code":"var _jsxFileName = \"/Users/linhleba/Desktop/ToLiShop/src/pages/Password.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Controls from '../components/controls/Controls';\nimport { Grid, TextField } from '@material-ui/core';\nimport { useForm, Form } from '../components/useForm/useForm';\nimport { useDispatch } from 'react-redux';\nimport { setSnackbar } from '../redux/ducks/snackbar';\nimport callAPI from '../utils/apiCaller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Password = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const initialFValues = {\n    oldPass: '',\n    newPass: '',\n    reconfirmNewPass: ''\n  }; //   const { handleInfo } = props;\n\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors\n    };\n    if ('oldPass' in fieldValues) temp.oldPass = fieldValues.oldPass ? '' : 'Trường này không được để trống.';\n    if ('newPass' in fieldValues) temp.newPass = fieldValues.newPass ? '' : 'Trường này không được để trống.';\n    if ('reconfirmNewPass' in fieldValues) temp.reconfirmNewPass = fieldValues.reconfirmNewPass ? '' : 'Trường này không được để trống.';\n    setErrors({ ...temp\n    });\n    if (fieldValues == values) return Object.values(temp).every(x => x == '');\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, true, validate);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (validate()) {\n      // Check newPassword is matched or not\n      if (values.newPass != values.reconfirmNewPass) {\n        dispatch(setSnackbar(true, 'error', 'Mật khẩu mới không khớp!'));\n      } else {\n        let profile = localStorage.getItem('profile');\n        let access_jwt_token = JSON.parse(profile).access_jwt_token;\n        await callAPI('api/account/changepassword', 'put', {\n          password: values.oldPass,\n          newPassword: values.newPass\n        }, {\n          authorization: access_jwt_token\n        }).then(res => {\n          if (res.data.data) {\n            // console.log(res);\n            dispatch(setSnackbar(true, 'success', 'Thay đổi mật khẩu thành công!'));\n            resetForm();\n          } else {\n            // console.log(res);\n            dispatch(setSnackbar(true, 'error', 'Mật khẩu cũ không đúng!'));\n          }\n        });\n      } // addOrEdit(values, resetForm);\n      // handle posts\n      //   handleInfo(values, resetForm);\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" \\u0110\\u1ED5i m\\u1EADt kh\\u1EA9u \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"oldPass\",\n          label: \"M\\u1EADt kh\\u1EA9u hi\\u1EC7n t\\u1EA1i\",\n          value: values.oldPass,\n          type: \"password\",\n          onChange: handleInputChange,\n          error: errors.oldPass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"newPass\",\n          label: \"M\\u1EADt kh\\u1EA9u m\\u1EDBi\",\n          value: values.newPass,\n          type: \"password\",\n          onChange: handleInputChange,\n          error: errors.newPass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls.Input, {\n          name: \"reconfirmNewPass\",\n          label: \"X\\xE1c nh\\u1EADn m\\u1EADt kh\\u1EA9u m\\u1EDBi\",\n          value: values.reconfirmNewPass,\n          type: \"password\",\n          onChange: handleInputChange,\n          error: errors.reconfirmNewPass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n      type: \"submit\",\n      text: \"L\\u01B0u thay \\u0111\\u1ED5i\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls.Button, {\n      text: \"\\u0110\\u1EB7t l\\u1EA1i\",\n      color: \"default\",\n      onClick: () => resetForm()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Password, \"8yiBGnsL+XaO0GAzKs26mtyXZao=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = Password;\nexport default Password;\n\nvar _c;\n\n$RefreshReg$(_c, \"Password\");","map":{"version":3,"sources":["/Users/linhleba/Desktop/ToLiShop/src/pages/Password.jsx"],"names":["React","Controls","Grid","TextField","useForm","Form","useDispatch","setSnackbar","callAPI","Password","dispatch","initialFValues","oldPass","newPass","reconfirmNewPass","validate","fieldValues","values","temp","errors","setErrors","Object","every","x","setValues","handleInputChange","resetForm","handleSubmit","e","preventDefault","profile","localStorage","getItem","access_jwt_token","JSON","parse","password","newPassword","authorization","then","res","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Controls from '../components/controls/Controls';\nimport { Grid, TextField } from '@material-ui/core';\nimport { useForm, Form } from '../components/useForm/useForm';\nimport { useDispatch } from 'react-redux';\nimport { setSnackbar } from '../redux/ducks/snackbar';\nimport callAPI from '../utils/apiCaller';\n\nconst Password = () => {\n  const dispatch = useDispatch();\n  const initialFValues = {\n    oldPass: '',\n    newPass: '',\n    reconfirmNewPass: '',\n  };\n\n  //   const { handleInfo } = props;\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors };\n    if ('oldPass' in fieldValues)\n      temp.oldPass = fieldValues.oldPass\n        ? ''\n        : 'Trường này không được để trống.';\n    if ('newPass' in fieldValues)\n      temp.newPass = fieldValues.newPass\n        ? ''\n        : 'Trường này không được để trống.';\n    if ('reconfirmNewPass' in fieldValues)\n      temp.reconfirmNewPass = fieldValues.reconfirmNewPass\n        ? ''\n        : 'Trường này không được để trống.';\n\n    setErrors({\n      ...temp,\n    });\n\n    if (fieldValues == values) return Object.values(temp).every((x) => x == '');\n  };\n  const { values, setValues, errors, setErrors, handleInputChange, resetForm } =\n    useForm(initialFValues, true, validate);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (validate()) {\n      // Check newPassword is matched or not\n      if (values.newPass != values.reconfirmNewPass) {\n        dispatch(setSnackbar(true, 'error', 'Mật khẩu mới không khớp!'));\n      } else {\n        let profile = localStorage.getItem('profile');\n        let access_jwt_token = JSON.parse(profile).access_jwt_token;\n        await callAPI(\n          'api/account/changepassword',\n          'put',\n          {\n            password: values.oldPass,\n            newPassword: values.newPass,\n          },\n          {\n            authorization: access_jwt_token,\n          },\n        ).then((res) => {\n          if (res.data.data) {\n            // console.log(res);\n            dispatch(\n              setSnackbar(true, 'success', 'Thay đổi mật khẩu thành công!'),\n            );\n            resetForm();\n          } else {\n            // console.log(res);\n            dispatch(setSnackbar(true, 'error', 'Mật khẩu cũ không đúng!'));\n          }\n        });\n      }\n\n      // addOrEdit(values, resetForm);\n      // handle posts\n      //   handleInfo(values, resetForm);\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <h2> Đổi mật khẩu </h2>\n      <Grid container>\n        <Grid item xs={6}>\n          <Controls.Input\n            name=\"oldPass\"\n            label=\"Mật khẩu hiện tại\"\n            value={values.oldPass}\n            type=\"password\"\n            onChange={handleInputChange}\n            error={errors.oldPass}\n          />\n          <Controls.Input\n            name=\"newPass\"\n            label=\"Mật khẩu mới\"\n            value={values.newPass}\n            type=\"password\"\n            onChange={handleInputChange}\n            error={errors.newPass}\n          />\n          <Controls.Input\n            name=\"reconfirmNewPass\"\n            label=\"Xác nhận mật khẩu mới\"\n            value={values.reconfirmNewPass}\n            type=\"password\"\n            onChange={handleInputChange}\n            error={errors.reconfirmNewPass}\n          />\n        </Grid>\n      </Grid>\n      <Controls.Button type=\"submit\" text=\"Lưu thay đổi\" />\n      <Controls.Button\n        text=\"Đặt lại\"\n        color=\"default\"\n        onClick={() => resetForm()}\n      />\n    </Form>\n  );\n};\n\nexport default Password;\n"]},"metadata":{},"sourceType":"module"}